---
openapi: 3.0.3
info:
  title: Booking API
  description: This is the API of the Booking service
  contact:
    email: helene.coullon@imt-atlantique.fr
  license:
    name: GPL v3
    url: https://www.gnu.org/licenses/gpl-3.0.en.html
  version: 1.0.0
tags:
- name: admins
  description: Secured Admin-only calls
- name: developers
  description: Operations available to regular developers
paths:
  /:
    get:
      tags:
      - developers
      summary: home page of the service
      description: |
        Nothing to do
      operationId: home
      responses:
        "200":
          description: welcome message
          content:
            text/html:
              schema:
                type: string
                example: <h1>Test</h1>
  /bookings:
    get:
      tags:
      - developers
      summary: get the full JSON database
      description: |
        Nothing to do
      operationId: get_json
      responses:
        "200":
          description: full JSON
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllBookings'
  /bookings/{userid}:
    get:
      tags:
      - developers
      summary: get the bookings from a user id
      description: By passing in the appropriate options, you can get bookings of a user
      operationId: get_booking_for_user
      parameters:
      - name: userid
        in: path
        description: User ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Bookings of the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingsUser'
        "400":
          description: bad input parameter
    post:
      tags:
      - admins
      summary: add a booking for a user
      description: Adds a booking for the user, the service showtimes have to be requested to check the validity of the booking that is asked
      operationId: add_booking_byuser
      parameters:
      - name: userid
        in: path
        description: User ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: item to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewMovie'
      responses:
        "200":
          description: Booking added successfully
        "400":
          description: bad input parameter
        "409":
          description: an existing item already exists


    delete:
          tags:
          - admins
          summary: delete a booking for a user
          operationId: delete_booking_for_user
          parameters:
          - name: userid
            in: path
            description: User ID.
            required: true
            style: simple
            explode: false
            schema:
              type: string
          requestBody:
            description: item to delete
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/MovieToDelete'
          responses:
            "200":
              description: Booking deleted
            "400":
              description: bad input parameter 
            "404":
              description: date or movie inexistant, so can't be deleted 
  
  /bookings/available_movies/{date}:
    get:
      summary: Get available movies for a given date
      operationId: get_bookings_by_date
      parameters:
        - in: path
          name: date
          required: true
          schema:
            type: string
            format: date
            example: "20151130"
      responses:
        "200":
          description: List of movies available on the specified date.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MoviesDetails'
        "400":
          description: no movies available on this date 
  /bookings/dates/{movieid}:
    get:
      summary: Returns the available dates for a movie 
      operationId: get_dates_for_movie
      parameters:
        - name: movieid
          in: path
          required: true
          description: id of movie 
          schema:
            type: string
      responses:
        '200':
          description: list of showtimes
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          description: no showtimes available for this movie

components:
  schemas:
    AllBookings:
      type: array
      items:
        $ref: '#/components/schemas/BookingsUser'
    BookingsUser:
      required:
      - dates
      - userid
      type: object
      properties:
        userid:
          type: string
          example: chris_rivers
        dates:
          type: array
          items:
            $ref: '#/components/schemas/DateItem'
    DateItem:
      required:
      - date
      - movies
      type: object
      properties:
        date:
          type: string
          example: "20151201"
        movies:
          type: array
          items:
            type: string
            example: 276c79ec-a26a-40a6-b3d3-fb242a5947b6
    MoviesDetails:
      required:
      - date
      - movies
      type: object
      properties:
        date:
          type: string
          example: "20151201"
        movies:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/MovieItem'
    MovieItem:
      type: object
      required:
        - title
        - rating
        - director
        - id
      properties:
        title:
          type: string
          example: The Martian
        rating:
          type: integer
          example: 7
        director:
          type: string
          example: Paul McGuigan
        id:
          type: string
          example: 39ab85e5-5e8e-4dc5-afea-65dc368bd7ab
    NewMovie:
      required:
      - date
      - movieid
      type: object
      properties:
        date:
          type: string
          example: "20151201"
        movieid:
          type: string
          example: 276c79ec-a26a-40a6-b3d3-fb242a5947b6

    MovieToDelete:
      required:
      - date
      - movieid
      type: object
      properties:
        date:
          type: string
          example: "20151201"
        movieid:
          type: string
          example: 276c79ec-a26a-40a6-b3d3-fb242a5947b6